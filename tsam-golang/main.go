package main

import (
	"os"
	"os/signal"
	"sync"
	"syscall"

	_ "github.com/techlabs/swabhav/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/techlabs/swabhav/module"

	"github.com/techlabs/swabhav/tsam/event"
	"github.com/techlabs/swabhav/tsam/repository"
	"github.com/techlabs/swabhav/tsam/security"

	"github.com/techlabs/swabhav/tsam"
	env "github.com/techlabs/swabhav/tsam/config"
	"github.com/techlabs/swabhav/tsam/log"
)

var xyz int

// @title Talent Sourcing and Mentoring (TSAM)
// @version 1.0
// @description Short Description
// @contact.name Swabhav Techlabs
// @contact.email info@swabhavtechlabs.com
// @license.name Apache 2.0
// @host swabhav-tsam.herokuapp.com
// @BasePath /api/v1/tsam
func main() {

	// Create New Instance of Logger
	log := log.NewLogger()

	// Create New Instance of Config
	// use for app setting like (dbname, usename, password, secretkey, port number)
	isAppInProduction := true

	if len(os.Getenv("PORT")) > 0 {
		isAppInProduction = true
	}
	envconfig := env.NewConfig(isAppInProduction)

	// Create New Instace of DB
	db := tsam.NewDBConnection(log, envconfig)
	defer func() {
		db.Close()
		log.Info("Db closed")
	}()

	midlware := security.NewAuthentication(db, envconfig)
	var wg sync.WaitGroup

	// JWTKey := envconfig.GetString(config.JWTKey)
	var repository = repository.NewGormRepository()

	// Create new event pool (It will create a go routine)
	event.InitializePool(db, repository)

	app := tsam.NewApp("Talent Sourcing and Mentoring", db, log, envconfig, &wg, midlware, isAppInProduction)

	module.CreateRouterInstance(app, repository)
	// Need to make sure app starts within 60 seconds of deployment so heroku is able to find port.
	go func() {
		err := app.Start()
		if err != nil {
			stopApp(app)
		}
	}()
	// app.TableMigration()
	module.Configure(app)

	// Stop Server On System Call or Interrupt.
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, os.Interrupt, syscall.SIGTERM)
	<-ch
	stopApp(app)
}

func stopApp(app *tsam.App) {
	app.Stop()
	app.WG.Wait()
	os.Exit(0)
}
